{"code":"import { useContextSelector } from 'use-context-selector';\r\nimport { StoreContext } from '../store/rootReducer';\r\nimport { CLEAR_USER, SET_CURRENCY, SET_LANG, SET_LOGIN_NR, SET_TOKEN, SET_USER, } from '../store/user/types';\r\nimport { api } from './consts';\r\nconst fetchAuthorize = (config) => api.get('/users/authenticate', config);\r\nexport const useHeadersActions = () => {\r\n    const dispatch = useContextSelector(StoreContext, c => c.dispatch.userDispatch);\r\n    const isLoggedIn = useContextSelector(StoreContext, c => !!c.state.user.user);\r\n    const setCurrency = (currency) => {\r\n        if (currency !== api.defaults.headers.common['X-Currency']) {\r\n            dispatch({ type: SET_CURRENCY, payload: { currency } });\r\n        }\r\n    };\r\n    const authorize = async (signal) => {\r\n        let response;\r\n        try {\r\n            response = await fetchAuthorize({ signal });\r\n        }\r\n        catch {\r\n            // @ts-expect-error hideTokenHash\r\n            response = await fetchAuthorize({ hideTokenHash: true, signal });\r\n        }\r\n        const data = response.data;\r\n        if (!data) {\r\n            return;\r\n        }\r\n        dispatch({ type: SET_USER, payload: { user: data } });\r\n        if (data.creditPrice) {\r\n            dispatch({\r\n                type: SET_LOGIN_NR,\r\n                payload: { loginNr: data.accountCode },\r\n            });\r\n        }\r\n        setCurrency(data.currency);\r\n        return data;\r\n    };\r\n    const setCaptcha = (hash) => {\r\n        if (!isLoggedIn) {\r\n            api.defaults.headers.common['X-ReCaptcha-Token'] = hash;\r\n        }\r\n    };\r\n    const setLanguage = (language) => {\r\n        if (language !== api.defaults.headers.common['X-Lang']) {\r\n            dispatch({ type: SET_LANG, payload: { language } });\r\n        }\r\n    };\r\n    const setToken = async (token) => {\r\n        if (token) {\r\n            api.defaults.headers.Authorization = `Bearer ${token}`;\r\n            dispatch({ type: SET_TOKEN, payload: { token } });\r\n            // eslint-disable-next-line @typescript-eslint/return-await\r\n            return await authorize();\r\n        }\r\n        else {\r\n            delete api.defaults.headers.Authorization;\r\n            dispatch({ type: CLEAR_USER });\r\n        }\r\n    };\r\n    return {\r\n        authorize,\r\n        setCaptcha,\r\n        setCurrency,\r\n        setLanguage,\r\n        setToken,\r\n    };\r\n};\r\nconst useHeaders = () => {\r\n    const { currency, language, token } = useContextSelector(StoreContext, c => c.state.user);\r\n    return {\r\n        currency,\r\n        language: language || 'cs',\r\n        token,\r\n    };\r\n};\r\nexport default useHeaders;\r\n//# sourceMappingURL=useHeaders.js.map","references":["/home/karelpelcak/Documents/repo/rj-shop-bl/node_modules/axios/index.d.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/node_modules/use-context-selector/dist/src/index.d.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/src/store/rootReducer.tsx","/home/karelpelcak/Documents/repo/rj-shop-bl/src/store/user/types.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/src/hooks/consts.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/src/hooks/types.ts"],"map":"{\"version\":3,\"file\":\"useHeaders.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/hooks/useHeaders.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/karelpelcak/Documents/repo/rj-shop-bl/dist/hooks/useHeaders.d.ts","writeByteOrderMark":false,"text":"import type { GenericAbortSignal } from 'axios';\r\nimport { PersistedUser } from '../store/user/types';\r\nimport { Currency, Language } from './types';\r\nexport declare const useHeadersActions: () => {\r\n    authorize: (signal?: GenericAbortSignal) => Promise<PersistedUser | undefined>;\r\n    setCaptcha: (hash: string) => void;\r\n    setCurrency: (currency: Currency) => void;\r\n    setLanguage: (language: Language) => void;\r\n    setToken: (token: string | null) => Promise<PersistedUser | undefined>;\r\n};\r\ndeclare const useHeaders: () => {\r\n    currency: Currency;\r\n    language: Language;\r\n    token: string | null;\r\n};\r\nexport default useHeaders;\r\n"}}
