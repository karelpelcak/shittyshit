{"code":"import { useContextSelector } from 'use-context-selector';\r\nimport { StoreContext } from '../store/rootReducer';\r\nimport { REFRESH_COOLDOWN, REFUSE_UPSELL } from '../store/upsell/types';\r\nimport { api } from './consts';\r\nimport { getMoreExpensiveClass, gtmPush } from './utils';\r\nlet acceptedClass;\r\nlet priceDifference;\r\n/**\r\n * Call any function only after shouldBeShown is true\r\n */\r\nconst useUpsell = () => {\r\n    const dispatch = useContextSelector(StoreContext, c => c.dispatch.upsellDispatch);\r\n    const cooldownTs = useContextSelector(StoreContext, c => c.state.upsell.cooldownTs);\r\n    const refuseUpsell = () => dispatch({ type: REFUSE_UPSELL });\r\n    const acceptUpsell = () => gtmPush({\r\n        event: 'ACCEPT_UPSELL',\r\n        ACCEPT_UPSELL: {\r\n            acceptedClass,\r\n            priceDiff: priceDifference,\r\n            currency: api.defaults.headers.common['X-Currency'],\r\n        },\r\n    });\r\n    const shouldShowUpsell = (selectedClassKey, priceClasses, ticketType) => {\r\n        dispatch({ type: REFRESH_COOLDOWN });\r\n        const upsellClass = getMoreExpensiveClass(selectedClassKey, priceClasses);\r\n        if (!upsellClass ||\r\n            cooldownTs > new Date().valueOf() ||\r\n            ticketType !== 'RJ_SEAT') {\r\n            return null;\r\n        }\r\n        const priceDiff = upsellClass.price -\r\n            (priceClasses.find((pc) => pc.seatClassKey === selectedClassKey)?.price ||\r\n                0);\r\n        acceptedClass = upsellClass.seatClassKey;\r\n        priceDifference = priceDiff;\r\n        return { priceDiff, upsellClass };\r\n    };\r\n    return { acceptUpsell, refuseUpsell, shouldShowUpsell };\r\n};\r\nexport default useUpsell;\r\n//# sourceMappingURL=useUpsell.js.map","references":["/home/karelpelcak/Documents/repo/rj-shop-bl/node_modules/use-context-selector/dist/src/index.d.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/src/store/rootReducer.tsx","/home/karelpelcak/Documents/repo/rj-shop-bl/src/store/upsell/types.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/src/hooks/consts.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/src/hooks/types.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/src/hooks/useConnectionRoute.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/src/hooks/utils.ts"],"map":"{\"version\":3,\"file\":\"useUpsell.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/hooks/useUpsell.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAC1D,OAAO,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAC;AACpD,OAAO,EAAE,gBAAgB,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAC;AACxE,OAAO,EAAE,GAAG,EAAE,MAAM,UAAU,CAAC;AAG/B,OAAO,EAAE,qBAAqB,EAAE,OAAO,EAAE,MAAM,SAAS,CAAC;AAEzD,IAAI,aAAwB,CAAC;AAC7B,IAAI,eAAuB,CAAC;AAO5B;;GAEG;AACH,MAAM,SAAS,GAAG,GAAG,EAAE;IACrB,MAAM,QAAQ,GAAG,kBAAkB,CAAC,YAAY,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;IAClF,MAAM,UAAU,GAAG,kBAAkB,CAAC,YAAY,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IAEpF,MAAM,YAAY,GAAG,GAAG,EAAE,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC,CAAC;IAE7D,MAAM,YAAY,GAAG,GAAG,EAAE,CACxB,OAAO,CAAC;QACN,KAAK,EAAE,eAAe;QACtB,aAAa,EAAE;YACb,aAAa;YACb,SAAS,EAAE,eAAe;YAC1B,QAAQ,EAAE,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC;SACpD;KACF,CAAC,CAAC;IAEL,MAAM,gBAAgB,GAAG,CACvB,gBAA2B,EAC3B,YAA0B,EAC1B,UAAsB,EACH,EAAE;QACrB,QAAQ,CAAC,EAAE,IAAI,EAAE,gBAAgB,EAAE,CAAC,CAAC;QACrC,MAAM,WAAW,GAAG,qBAAqB,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;QAE1E,IACE,CAAC,WAAW;YACZ,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE;YACjC,UAAU,KAAK,SAAS,EACxB;YACA,OAAO,IAAI,CAAC;SACb;QAED,MAAM,SAAS,GACb,WAAW,CAAC,KAAK;YACjB,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,YAAY,KAAK,gBAAgB,CAAC,EAAE,KAAK;gBACrE,CAAC,CAAC,CAAC;QAEP,aAAa,GAAG,WAAW,CAAC,YAAY,CAAC;QACzC,eAAe,GAAG,SAAS,CAAC;QAE5B,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,CAAC;IACpC,CAAC,CAAC;IAEF,OAAO,EAAE,YAAY,EAAE,YAAY,EAAE,gBAAgB,EAAE,CAAC;AAC1D,CAAC,CAAC;AAEF,eAAe,SAAS,CAAC\"}","dts":{"name":"/home/karelpelcak/Documents/repo/rj-shop-bl/dist/hooks/useUpsell.d.ts","writeByteOrderMark":false,"text":"import { SeatClass, TicketType } from './types';\r\nimport { PriceClass } from './useConnectionRoute';\r\nexport interface UpsellData {\r\n    priceDiff: number;\r\n    upsellClass: PriceClass;\r\n}\r\n/**\r\n * Call any function only after shouldBeShown is true\r\n */\r\ndeclare const useUpsell: () => {\r\n    acceptUpsell: () => void;\r\n    refuseUpsell: () => void;\r\n    shouldShowUpsell: (selectedClassKey: SeatClass, priceClasses: PriceClass[], ticketType: TicketType) => UpsellData | null;\r\n};\r\nexport default useUpsell;\r\n"}}
