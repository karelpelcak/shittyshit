{"code":"import { useMemo } from 'react';\r\nimport Fuse from 'fuse.js';\r\nimport deburr from 'lodash.deburr';\r\nimport { useContextSelector } from 'use-context-selector';\r\nimport { StoreContext } from '../store/rootReducer';\r\nimport { langPriorityCountries } from './consts';\r\nimport useLocations from './useLocations';\r\nimport { getPriorityInArray } from './utils';\r\nFuse.config.threshold = 0.2;\r\nconst MIN_SEARCH_LENGTH = 3;\r\nconst MAX_SCORE_MATCH = 0.1;\r\nconst extractCountry = (text) => deburr(text.split(',')[1].trim());\r\nconst removeDashDeburr = (text) => {\r\n    const [cityName, stationName] = deburr(text.split(',')[0]).split(' - ');\r\n    if (!stationName) {\r\n        return [cityName, ...cityName.split(/[ -]/g)];\r\n    }\r\n    return [cityName, ...cityName.split(/[ -]/g), stationName];\r\n};\r\nconst startsWith = (searchString) => (name) => removeDashDeburr(name.toLowerCase())\r\n    .some(part => part.startsWith(searchString));\r\nconst nameOrAliasesStartWith = (location, searchString) => {\r\n    const { name, aliases } = location;\r\n    const startsWithFn = startsWith(searchString);\r\n    const stations = location.stations;\r\n    return startsWithFn(name) ||\r\n        stations?.some(s => startsWithFn(s.name)) ||\r\n        aliases.some(a => deburr(a.toLowerCase()).startsWith(searchString));\r\n};\r\nconst sortStations = (locations, searchString) => (a, b) => {\r\n    const locationA = locations[a.refIndex];\r\n    const locationB = locations[b.refIndex];\r\n    const startsWithDiff = +nameOrAliasesStartWith(locationB, searchString) -\r\n        +nameOrAliasesStartWith(locationA, searchString);\r\n    if (!!startsWithDiff) {\r\n        return startsWithDiff;\r\n    }\r\n    // if the items do not match the search term enough, sort them by matching score\r\n    if (a.score > MAX_SCORE_MATCH || b.score > MAX_SCORE_MATCH) {\r\n        return a.score - b.score;\r\n    }\r\n    const significanceDiff = locationB.significance - locationA.significance;\r\n    // if the significance is equal, sort by score\r\n    if (!significanceDiff) {\r\n        return a.score - b.score;\r\n    }\r\n    // else sort by significance (show Prague first over Olomouc, etc.)\r\n    return significanceDiff;\r\n};\r\nconst sortCities = (searchString, language) => (a, b) => {\r\n    const startsWithDiff = +nameOrAliasesStartWith(b, searchString) -\r\n        +nameOrAliasesStartWith(a, searchString);\r\n    if (!!startsWithDiff) {\r\n        return startsWithDiff;\r\n    }\r\n    // if the items do not match the search term enough, sort them by matching score\r\n    if (a.score > MAX_SCORE_MATCH || b.score > MAX_SCORE_MATCH) {\r\n        return a.score - b.score;\r\n    }\r\n    const significanceDiff = b.significance - a.significance;\r\n    // if the cities significance difference is too high (we want to prioritize Prague over Zilina,\r\n    // even if we have SK language set)\r\n    if (!!significanceDiff) {\r\n        return significanceDiff;\r\n    }\r\n    const priorityCountries = langPriorityCountries[language];\r\n    const priorityDiff = getPriorityInArray(priorityCountries, a.code) -\r\n        getPriorityInArray(priorityCountries, b.code);\r\n    // if the country has equal priority and city has equal significance, sort by score\r\n    if (!priorityDiff && !significanceDiff) {\r\n        return a.score - b.score;\r\n    }\r\n    // sort by country priority, based on device language set \r\n    // (e.g. show AT cities to AT users primarily)\r\n    return priorityDiff;\r\n};\r\nconst useSearchLocations = (searchString) => {\r\n    const language = useContextSelector(StoreContext, c => c.state.user.language);\r\n    const shouldSearch = searchString.length >= MIN_SEARCH_LENGTH;\r\n    const { data } = useLocations();\r\n    const fuse = useMemo(() => data ?\r\n        new Fuse(data.map((c) => ({\r\n            country: extractCountry(c.name),\r\n            aliases: c.aliases.map(deburr),\r\n            name: removeDashDeburr(c.name),\r\n            fullName: deburr(c.name),\r\n            stations: c.stations.map((s) => ({\r\n                aliases: s.aliases.map(deburr),\r\n                name: removeDashDeburr(s.name),\r\n                fullName: deburr(s.name),\r\n            })),\r\n        })), {\r\n            includeScore: true,\r\n            keys: [\r\n                { name: 'country', weight: 0.5 },\r\n                { name: 'fullName', weight: 0.5 },\r\n                { name: 'name', weight: 0.9 },\r\n                { name: 'aliases', weight: 0.2 },\r\n                { name: 'stations.name', weight: 0.8 },\r\n                { name: 'stations.fullName', weight: 0.4 },\r\n                { name: 'stations.aliases', weight: 0.2 },\r\n            ],\r\n        }) : undefined, [data]);\r\n    const filtered = useMemo(() => {\r\n        if (!shouldSearch || !fuse || !data?.length) {\r\n            return [];\r\n        }\r\n        const normalizedSearchString = deburr(searchString).trim().toLowerCase();\r\n        return fuse\r\n            .search(normalizedSearchString)\r\n            .map((citySearch) => {\r\n            const city = data[citySearch.refIndex];\r\n            if (!city.stations.length) {\r\n                return {\r\n                    ...city,\r\n                    refIndex: citySearch.refIndex,\r\n                    score: citySearch.score,\r\n                    significance: city.significance ?? 0,\r\n                };\r\n            }\r\n            const stationsFuse = new Fuse(city.stations.map((s) => ({\r\n                country: citySearch.item.country,\r\n                aliases: s.aliases.map(deburr),\r\n                name: removeDashDeburr(s.name),\r\n                fullName: deburr(s.name),\r\n            })), {\r\n                includeScore: true,\r\n                keys: ['name', 'aliases', 'fullName', 'country'],\r\n            });\r\n            const stations = stationsFuse\r\n                .search(normalizedSearchString)\r\n                .sort(sortStations(city.stations, normalizedSearchString))\r\n                .map((stationSearch) => city.stations[stationSearch.refIndex]);\r\n            return {\r\n                ...city,\r\n                refIndex: citySearch.refIndex,\r\n                score: citySearch.score,\r\n                significance: Math.max(...stations.map(({ significance }) => significance)),\r\n                stations,\r\n            };\r\n        })\r\n            .sort(sortCities(normalizedSearchString, language))\r\n            .slice(0, 6);\r\n    }, [fuse, shouldSearch && searchString]);\r\n    return {\r\n        filtered,\r\n        shouldSearch,\r\n    };\r\n};\r\nexport default useSearchLocations;\r\n//# sourceMappingURL=useSearchLocations.js.map","references":["/home/karelpelcak/Documents/repo/rj-shop-bl/node_modules/@types/react/index.d.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/node_modules/fuse.js/dist/fuse.d.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/node_modules/@types/lodash.deburr/index.d.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/node_modules/use-context-selector/dist/src/index.d.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/src/store/rootReducer.tsx","/home/karelpelcak/Documents/repo/rj-shop-bl/src/hooks/consts.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/src/hooks/types.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/src/hooks/useLocations.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/src/hooks/utils.ts"],"map":"{\"version\":3,\"file\":\"useSearchLocations.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/hooks/useSearchLocations.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/karelpelcak/Documents/repo/rj-shop-bl/dist/hooks/useSearchLocations.d.ts","writeByteOrderMark":false,"text":"import { ConnectionSearchCity } from './useLocations';\r\ndeclare const useSearchLocations: (searchString: string) => {\r\n    filtered: ConnectionSearchCity[];\r\n    shouldSearch: boolean;\r\n};\r\nexport default useSearchLocations;\r\n"}}
