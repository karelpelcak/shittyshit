{"code":"import { useCallback, useEffect, useMemo } from 'react';\r\nimport { useContext, useContextSelector } from 'use-context-selector';\r\nimport { ResponseStateContext } from '../store/responseState/reducer';\r\nimport { ResponseStateCategory } from '../store/responseState/types';\r\nimport { StoreContext } from '../store/rootReducer';\r\nimport { getErrorMessage, langPriorityCountries } from './consts';\r\nimport PersistContext from './PersistContext';\r\nimport useSetResponseState from './useSetResponseState';\r\nimport { getPriorityInArray } from './utils';\r\nconst useLocations = (sort) => {\r\n    const language = useContextSelector(StoreContext, c => c.state.user.language);\r\n    const priorityCountries = langPriorityCountries[language];\r\n    const setState = useSetResponseState(ResponseStateCategory.locations);\r\n    const categoryState = useContextSelector(ResponseStateContext, c => c.state[ResponseStateCategory.locations]);\r\n    const { locationsResponse: { error, loading }, locations, } = useContext(PersistContext);\r\n    const getStation = useCallback((stationId) => {\r\n        if (!locations) {\r\n            return;\r\n        }\r\n        for (const city of locations) {\r\n            for (const station of city.stations) {\r\n                if (station.id === stationId) {\r\n                    return {\r\n                        ...station,\r\n                        cityId: city.id,\r\n                        cityName: city.name,\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    }, [locations]);\r\n    const getCity = useCallback((cityId) => locations?.find(c => c.id === cityId), [locations]);\r\n    const getDestination = (destinationId) => getStation(destinationId) ?? getCity(destinationId);\r\n    const data = useMemo(() => {\r\n        return sort ?\r\n            locations\r\n                ?.sort((a, b) => getPriorityInArray(priorityCountries, a.code) -\r\n                getPriorityInArray(priorityCountries, b.code))\r\n                .map(c => ({\r\n                ...c,\r\n                stations: c.stations.sort((a, b) => b.significance - a.significance),\r\n            })) :\r\n            locations;\r\n    }, [locations]);\r\n    useEffect(() => {\r\n        setState(error?.response?.data?.message || getErrorMessage(error), !!loading);\r\n    }, [error, loading]);\r\n    return { data, getCity, getDestination, getStation, ...categoryState };\r\n};\r\nexport default useLocations;\r\n//# sourceMappingURL=useLocations.js.map","references":["/home/karelpelcak/Documents/repo/rj-shop-bl/node_modules/@types/react/index.d.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/node_modules/use-context-selector/dist/src/index.d.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/src/store/responseState/reducer.tsx","/home/karelpelcak/Documents/repo/rj-shop-bl/src/store/responseState/types.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/src/store/rootReducer.tsx","/home/karelpelcak/Documents/repo/rj-shop-bl/src/hooks/consts.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/src/hooks/PersistContext.tsx","/home/karelpelcak/Documents/repo/rj-shop-bl/src/hooks/types.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/src/hooks/useSetResponseState.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/src/hooks/utils.ts"],"map":"{\"version\":3,\"file\":\"useLocations.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/hooks/useLocations.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/karelpelcak/Documents/repo/rj-shop-bl/dist/hooks/useLocations.d.ts","writeByteOrderMark":false,"text":"import { StationCountry } from './types';\r\nexport type StationType = 'BUS_STATION' | 'TRAIN_STATION';\r\nexport type LocationType = 'CITY' | 'STATION';\r\nexport interface StationCityCommons {\r\n    aliases: string[];\r\n    id: number;\r\n    name: string;\r\n    significance?: number;\r\n}\r\nexport interface ConnectionSearchStation extends StationCityCommons {\r\n    address: string;\r\n    latitude: number;\r\n    longitude: number;\r\n    placeType: 'STATION';\r\n    types: StationType[];\r\n    countryCode: StationCountry;\r\n}\r\nexport interface ConnectionSearchCity extends StationCityCommons {\r\n    stations: (ConnectionSearchStation & LocationStation)[];\r\n    placeType: 'CITY';\r\n    code: StationCountry;\r\n}\r\nexport interface LocationStation extends StationCityCommons {\r\n    address: string;\r\n    fullname: string;\r\n    imageUrl: string | null;\r\n    latitude: number;\r\n    longitude: number;\r\n    significance: number;\r\n    stationsTypes: StationType[];\r\n}\r\nexport interface LocationCity extends StationCityCommons {\r\n    stations: LocationStation[];\r\n}\r\nexport interface LocationCountry {\r\n    country: string;\r\n    code: StationCountry;\r\n    cities: LocationCity[];\r\n}\r\ndeclare const useLocations: (sort?: boolean) => {\r\n    error?: {\r\n        message?: string | undefined;\r\n        errorFields?: import(\"../store/responseState/types\").ErrorFields[] | undefined;\r\n    } | undefined;\r\n    loading: boolean;\r\n    data: ConnectionSearchCity[] | undefined;\r\n    getCity: (cityId: number) => ConnectionSearchCity | undefined;\r\n    getDestination: (destinationId: number) => ConnectionSearchCity | {\r\n        cityId: number;\r\n        cityName: string;\r\n        address: string;\r\n        latitude: number;\r\n        longitude: number;\r\n        placeType: 'STATION';\r\n        types: StationType[];\r\n        countryCode: StationCountry;\r\n        aliases: string[];\r\n        id: number;\r\n        name: string;\r\n        significance: number;\r\n        fullname: string;\r\n        imageUrl: string | null;\r\n        stationsTypes: StationType[];\r\n    } | undefined;\r\n    getStation: (stationId: number) => {\r\n        cityId: number;\r\n        cityName: string;\r\n        address: string;\r\n        latitude: number;\r\n        longitude: number;\r\n        placeType: 'STATION';\r\n        types: StationType[];\r\n        countryCode: StationCountry;\r\n        aliases: string[];\r\n        id: number;\r\n        name: string;\r\n        significance: number;\r\n        fullname: string;\r\n        imageUrl: string | null;\r\n        stationsTypes: StationType[];\r\n    } | undefined;\r\n};\r\nexport default useLocations;\r\n"}}
