{"code":"import { api } from './consts';\r\nimport { useManualApi } from './useManualApi';\r\nexport var Method;\r\n(function (Method) {\r\n    Method[\"ACCOUNT\"] = \"ACCOUNT\";\r\n    Method[\"BANK_TRANSFER\"] = \"BANK_TRANSFER\";\r\n})(Method || (Method = {}));\r\nconst LINES_PER_PAGE = 10;\r\nconst usePaymentsHistory = () => {\r\n    const [{ data, loading, error, response }, fetchPayments] = useManualApi({\r\n        url: '/payments',\r\n        method: 'GET',\r\n        headers: { Accept: 'application/1.1.0+json' },\r\n    });\r\n    const pagination = +(response?.headers['x-pagination-total'] || 0);\r\n    const pages = Math.floor(pagination / LINES_PER_PAGE) + 1;\r\n    const fetchPaymentsHistory = async (params, page = 0, signal) => {\r\n        try {\r\n            await fetchPayments({\r\n                params: {\r\n                    ...params,\r\n                    limit: LINES_PER_PAGE,\r\n                    offset: page * LINES_PER_PAGE,\r\n                },\r\n                signal,\r\n            });\r\n        }\r\n        catch (e) { }\r\n    };\r\n    const fetchInvoice = async (paymentId, routeType, signal) => {\r\n        try {\r\n            const matchedPayment = data?.find((p) => p.paymentId === paymentId);\r\n            const route = routeType || (matchedPayment?.ticketId ? 'invoice' : 'receipt');\r\n            const url = `/payments/${paymentId}/print/${route}`;\r\n            const { data: invoiceData } = await api.get(url, { signal });\r\n            return invoiceData;\r\n        }\r\n        catch (e) { }\r\n    };\r\n    const fetchInvoices = async (paymentIds, signal) => {\r\n        try {\r\n            const { data: invoicesData } = await api.post('/payments/print/invoice', { invoices: paymentIds }, { signal });\r\n            return invoicesData;\r\n        }\r\n        catch (e) { }\r\n    };\r\n    return {\r\n        data,\r\n        error,\r\n        fetchInvoice,\r\n        fetchInvoices,\r\n        fetchPaymentsHistory,\r\n        loading,\r\n        pages,\r\n    };\r\n};\r\nexport default usePaymentsHistory;\r\n//# sourceMappingURL=usePaymentsHistory.js.map","references":["/home/karelpelcak/Documents/repo/rj-shop-bl/node_modules/axios/index.d.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/src/hooks/consts.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/src/hooks/types.ts","/home/karelpelcak/Documents/repo/rj-shop-bl/src/hooks/useManualApi.ts"],"map":"{\"version\":3,\"file\":\"usePaymentsHistory.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/hooks/usePaymentsHistory.tsx\"],\"names\":[],\"mappings\":\"AACA,OAAO,EAAE,GAAG,EAAE,MAAM,UAAU,CAAC;AAE/B,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAI9C,MAAM,CAAN,IAAY,MAGX;AAHD,WAAY,MAAM;IAChB,6BAAmB,CAAA;IACnB,yCAA+B,CAAA;AACjC,CAAC,EAHW,MAAM,KAAN,MAAM,QAGjB;AAwBD,MAAM,cAAc,GAAG,EAAE,CAAC;AAE1B,MAAM,kBAAkB,GAAG,GAAG,EAAE;IAC9B,MAAM,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,aAAa,CAAC,GAAG,YAAY,CAEtE;QACA,GAAG,EAAE,WAAW;QAChB,MAAM,EAAE,KAAK;QACb,OAAO,EAAE,EAAE,MAAM,EAAE,wBAAwB,EAAE;KAC9C,CAAC,CAAC;IACH,MAAM,UAAU,GAAG,CAAC,CAAC,QAAQ,EAAE,OAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC;IAEnE,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;IAE1D,MAAM,oBAAoB,GAAG,KAAK,EAChC,MAA4B,EAC5B,IAAI,GAAG,CAAC,EACR,MAA2B,EAC3B,EAAE;QACF,IAAI;YACF,MAAM,aAAa,CAAC;gBAClB,MAAM,EAAE;oBACN,GAAG,MAAM;oBACT,KAAK,EAAE,cAAc;oBACrB,MAAM,EAAE,IAAI,GAAG,cAAc;iBAC9B;gBACD,MAAM;aACP,CAAC,CAAC;SACJ;QAAC,OAAO,CAAC,EAAE,GAAE;IAChB,CAAC,CAAC;IAEF,MAAM,YAAY,GAAG,KAAK,EACxB,SAAiB,EACjB,SAAuB,EACvB,MAA2B,EAC3B,EAAE;QACF,IAAI;YACF,MAAM,cAAc,GAAG,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC;YAEpE,MAAM,KAAK,GACT,SAAS,IAAI,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YAClE,MAAM,GAAG,GAAG,aAAa,SAAS,UAAU,KAAK,EAAE,CAAC;YAEpD,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,GAAG,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;YAC7D,OAAO,WAAW,CAAC;SACpB;QAAC,OAAO,CAAC,EAAE,GAAE;IAChB,CAAC,CAAC;IAEF,MAAM,aAAa,GAAG,KAAK,EACzB,UAAoB,EACpB,MAA2B,EAC3B,EAAE;QACF,IAAI;YACF,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,GAAG,MAAM,GAAG,CAAC,IAAI,CAC3C,yBAAyB,EACzB,EAAE,QAAQ,EAAE,UAAU,EAAE,EACxB,EAAE,MAAM,EAAE,CACX,CAAC;YACF,OAAO,YAAY,CAAC;SACrB;QAAC,OAAO,CAAC,EAAE,GAAG;IACjB,CAAC,CAAC;IAEF,OAAO;QACL,IAAI;QACJ,KAAK;QACL,YAAY;QACZ,aAAa;QACb,oBAAoB;QACpB,OAAO;QACP,KAAK;KACN,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,kBAAkB,CAAC\"}","dts":{"name":"/home/karelpelcak/Documents/repo/rj-shop-bl/dist/hooks/usePaymentsHistory.d.ts","writeByteOrderMark":false,"text":"import type { GenericAbortSignal } from 'axios';\r\nimport { Currency, DateString, TicketType } from './types';\r\ntype PaymentType = 'DIRECT' | 'CREDIT';\r\nexport declare enum Method {\r\n    ACCOUNT = \"ACCOUNT\",\r\n    BANK_TRANSFER = \"BANK_TRANSFER\"\r\n}\r\nexport interface PaymentData {\r\n    amount: number;\r\n    currency: Currency;\r\n    dateTransaction: DateString;\r\n    description: string;\r\n    isInvoiceAvailable: boolean;\r\n    isReceiptAvailable: boolean;\r\n    method: Method;\r\n    paymentId: number;\r\n    ticketId: number | null;\r\n    ticketType: TicketType | null;\r\n}\r\nexport interface PaymentsHistoryQuery {\r\n    dateFrom: DateString;\r\n    dateTo: DateString;\r\n    sortDirection: 'ASC' | 'DESC';\r\n    type: PaymentType[];\r\n}\r\nexport type InvoiceType = 'invoice' | 'receipt';\r\ndeclare const usePaymentsHistory: () => {\r\n    data: PaymentData[] | undefined;\r\n    error: import(\"axios\").AxiosError<any, any> | null;\r\n    fetchInvoice: (paymentId: number, routeType?: InvoiceType, signal?: GenericAbortSignal) => Promise<any>;\r\n    fetchInvoices: (paymentIds: number[], signal?: GenericAbortSignal) => Promise<any>;\r\n    fetchPaymentsHistory: (params: PaymentsHistoryQuery, page?: number, signal?: GenericAbortSignal) => Promise<void>;\r\n    loading: boolean;\r\n    pages: number;\r\n};\r\nexport default usePaymentsHistory;\r\n"}}
